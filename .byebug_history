q
self.variables
self.class
self.methods
self
q
self.send(through_name).send(source_name)
self.send(through_name)
self.through_name
through_name
throughname
c
q
self
options.model_class.all
options.model_class
options
q
HasManyOptions.new(name, options)
options
q
defaults
defaults.merge!(options)
options
defaults = {:foreign_key=>:human_id}
    }
      :primary_key => :id
      :class_name => name.to_s.singularize.camelcase,
      :foreign_key => "#{self_class_name}_id".downcase.to_sym,
defaults = {
options
c
s
ss
s
ss
s
as
s
defaults
options
c
q
defaults[:primary_key]
defaults[:primary]
defaults[:foreign_key]
defaults.merge!(options)
defaults
options
q
self_class_name
c
q
name
options
c
display defaults
q
c
display defaults
c
defaults
c
defaults
q
name
options
q
name
self_class_name.downcase.to_sym
self_class_name.downcase
self_class_name
q
name
options
q
options
q
options.model_class.where(options.primary_key => self.send(options.foreign_key)).first
options.model_class.where(options.primary_key => self.send(options.foreign_key))
q
options.model_class.where(options.primary_key => self.send(options.foreign_key))
options.model_class.all
options.model_class.primary_key
options.primary_key
self.send(options.foreign_key)
options.model_class.where(id: 1)
options.model_class.where(:id = 1)
options.model_class.where(:id 1)
options.primary_key
self.send(options.foreign_key)
options.model_class.where(options.primary_key == self.send(options.foreign_key))
options.model_class.where(id: 1)
options.model_class
q
self
self.send(options.foreign_key)
options.foreign_key
options.model_class.where(id: 1)
options.model_class.all
options.model_class
options
options.foreign_key
q
options.foreign_key
options
q
options.model_class.where({options.foreign_key => 2})
options.model_class.where({options.foreign_key => 1})
options.model_class.where({foreign_key => 1})
options.model_class.where({id => 1})
options.model_class.where({options.foreign_key => 1})
options.model_class.where({options.foreign_key: 1})
options.model_class.where({options.foreign_key: id})
options.model_class.where({options.foreign_key: :id})
options.model_class.all
options.model_class.class
options.model_class
options.methods
options.model_name
options.class_name
options
name
model_class
name.model_class
q
options.foreign_key
options
c
options
name
q
BelongsToOptions.new(name, options)
BelongsToOptions(name, options)
name
c
s
defaults
q
c
options
defaults
q
defaults
primary_key
:primary_key
:foreign_key
q
defaults
q
defaults
c
q
c
display vals
display where_line
c
q
c
vals
q
vals
c
attr_val
q
s
vals
c
vals
q
where_line
vals
values
c
q
vals
q
params
where_line
q
Cat.all.last.id
Cat.all.last
Cat.all
self.all
insert
q
c
q
self.class.table_name
self.class
@table_name
table_name
self.table_name
c
question_marks
q
question_marks.join(", ")
question_marks
q
col_names
question_marks
q
col_names
question_marks
q
col_names
q
new(result)
q
result.truthy
result.truthy?
result
q
display result
q
display result
n
q
c
display result
q
result
q
table_name
q
results
q
results
q
self.favorite
self.id
self.name
new_name
q
c
self.name
self.name= value
self.name
self.class.columns.include?(name)
display value
display name
q
c
display value
display name
c
n
name
attr_name
q
cc
c
self.class.columns.include?(name)
self.class.columns.incllude?(name)
self.class.columns
self.class
